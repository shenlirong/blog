"use strict";(self.webpackChunktest3=self.webpackChunktest3||[]).push([[2707],{2959:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var l=a(641);const n={},t=(0,a(6262).A)(n,[["render",function(i,s){return(0,l.uX)(),(0,l.CE)("div",null,[(0,l.Q3)(" more "),s[0]||(s[0]=(0,l.Fv)('<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>此处存放的一些正则表达式基础知识。</p></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><h3 id="一、什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#一、什么是正则表达式"><span>一、什么是正则表达式？</span></a></h3><p>正则表达式（Regular Expression，常简写为 regex 或 regexp） 本质上是一种字符串匹配的模式。你可以把它想象成一个“万能模糊查找”的超级搜索工具。<br> 它使用预先定义好的一些特定字符（元字符）及其组合，构成一个“规则字符串”。这个“规则字符串”用来表达对另一种字符串（你的目标文本）的一种过滤逻辑。<br> 核心思想： 用一串特殊的字符，来描述一个句子中满足某种“模式”的所有字符串。比如，“所有以字母开头、后面跟着数字的字符串”这种模式。</p><h3 id="二、正则表达式的主要用途" tabindex="-1"><a class="header-anchor" href="#二、正则表达式的主要用途"><span>二、正则表达式的主要用途</span></a></h3><p>它的应用无处不在，尤其是在文本处理领域：</p><ol><li>数据验证：检查用户输入是否符合格式要求（例如，邮箱、电话号码、身份证号、密码强度）。</li><li>数据抓取/提取：从一大段文本或网页源码中快速找出需要的信息（例如，找出所有的超链接、图片地址、特定数字）。</li><li>数据替换/清理：批量替换或删除不符合要求的文本（例如，删除所有空格、标点符号，将“日期格式从 YYYY-MM-DD 替换成 DD/MM/YYYY”）。</li><li>字符串分割：按照复杂的规则来分割字符串，而不仅仅是使用固定分隔符。</li></ol><h3 id="三、正则表达式有哪些-核心语法元素" tabindex="-1"><a class="header-anchor" href="#三、正则表达式有哪些-核心语法元素"><span>三、正则表达式有哪些？（核心语法元素）</span></a></h3><p>正则表达式不是单一的一个东西，而是一个由各种元字符（Metacharacters） 组成的语法体系。下面分类介绍最常见的元素：</p><h4 id="_1-普通字符和简单转义" tabindex="-1"><a class="header-anchor" href="#_1-普通字符和简单转义"><span>1. 普通字符和简单转义</span></a></h4><ul><li>a, z, 3, 中文 等：匹配字符本身。</li><li>\\n：匹配换行符。</li><li>\\t：匹配制表符。</li><li>\\：匹配一个反斜杠 \\（因为 \\ 是元字符，需要转义）。</li></ul><h4 id="_2-字符类-匹配单个字符" tabindex="-1"><a class="header-anchor" href="#_2-字符类-匹配单个字符"><span>2. 字符类（匹配单个字符）</span></a></h4><ul><li>[abc]：匹配 a, b, 或 c 中的任意一个字符。</li><li>[a-z]：匹配从 a 到 z 的任意小写字母。</li><li>[0-9]：匹配任意一个数字。等价于 \\d。</li><li>[^abc]：匹配 除了 a, b, c 以外 的任意一个字符（^ 在方括号内表示“非”）。</li><li>预定义字符类（非常常用！） <ul><li>\\d：匹配一个数字。等价于 [0-9]。</li><li>\\D：匹配一个非数字。等价于 [^0-9]。</li><li>\\w：匹配一个字母、数字或下划线。等价于 [a-zA-Z0-9_]。</li><li>\\W：匹配一个非（字母、数字、下划线）。</li><li>\\s：匹配一个空白字符（包括空格、制表符、换页符等）。</li><li>\\S：匹配一个非空白字符。</li><li>. （点号）：匹配除换行符（\\n）以外的任意一个字符。</li></ul></li></ul><h4 id="_3-量词-匹配次数" tabindex="-1"><a class="header-anchor" href="#_3-量词-匹配次数"><span>3. 量词（匹配次数）</span></a></h4><ul><li>?：匹配前面的子表达式 0 次或 1 次（即可有可无）。例如，colou?r 能匹配 color 和 colour。</li><li>*：匹配前面的子表达式 0 次或多次。</li><li>+：匹配前面的子表达式 1 次或多次（即至少有一次）。</li><li>{n}：匹配前面的子表达式 恰好 n 次。例如，\\d{4} 匹配4位数字。</li><li>{n,}：匹配前面的子表达式 至少 n 次。</li><li>{n,m}：匹配前面的子表达式 至少 n 次，至多 m 次。</li></ul><h4 id="_4-位置锚点-匹配位置-而不是字符" tabindex="-1"><a class="header-anchor" href="#_4-位置锚点-匹配位置-而不是字符"><span>4. 位置锚点（匹配位置，而不是字符）</span></a></h4><ul><li><sup>：匹配字符串的开始位置。例如，</sup>Hello 只会匹配以 “Hello” 开头的字符串。</li><li>$：匹配字符串的结束位置。例如，world$ 只会匹配以 “world” 结尾的字符串。</li><li>\\b：匹配一个单词边界（即单词和空格间的位置）。例如，\\bcat\\b 可以匹配 “a cat” 中的 “cat”，但不会匹配 “category” 中的 “cat”。</li></ul><h4 id="_5-分组与捕获" tabindex="-1"><a class="header-anchor" href="#_5-分组与捕获"><span>5. 分组与捕获</span></a></h4><ul><li>(abc)：将多个字符作为一个分组（组），可以对整个组使用量词，例如 (abc)+ 可以匹配 “abc” 或 “abcabc”。</li><li>(a|b)：表示**“或”**，匹配 a 或者 b。例如，(jpg|png|gif) 可以匹配三种图片后缀。</li></ul><h3 id="四、一个简单的例子" tabindex="-1"><a class="header-anchor" href="#四、一个简单的例子"><span>四、一个简单的例子</span></a></h3><p>假设我们要匹配一个中国手机号（粗略版，以1开头，共11位数字）：<br> ^1[3-9]\\d{9}$<br> 让我们来分解它：</p><ul><li>^：表示字符串的开始。</li><li>1：匹配数字 1。</li><li>[3-9]：匹配数字 3 到 9 中的任意一个。</li><li>\\d{9}：匹配任意9个数字。</li><li>$：表示字符串的结束。<br> 这个正则表达式能确保整个字符串必须是从头到尾严格符合“1开头，第二位是3-9，后面是任意9个数字”的规则，不多不少。</li></ul><h3 id="五、不同流派-flavors" tabindex="-1"><a class="header-anchor" href="#五、不同流派-flavors"><span>五、不同流派（Flavors）</span></a></h3><p>需要注意的是，正则表达式在不同的编程语言或工具中（如 Python, JavaScript, Java, PHP, grep, sed）会有细微的差别。虽然核心思想一致，但一些高级特性（如命名分组、向后查找等）的支持和语法可能不同。</p><h3 id="学习建议" tabindex="-1"><a class="header-anchor" href="#学习建议"><span>学习建议</span></a></h3><ol><li>从基础开始：先掌握上面列出的核心元字符（[], \\d, \\w, ?, *, +, ^, $）。</li><li>多练习：使用在线的正则表达式测试工具（如 <a href="http://regex101.com" target="_blank" rel="noopener noreferrer">regex101.com</a> 或 <a href="http://regexr.com" target="_blank" rel="noopener noreferrer">regexr.com</a>）来编写和测试你的表达式，它们有实时高亮和解释功能，对学习非常有帮助。</li><li>循序渐进：不要试图一次学会所有复杂用法，在实践中遇到具体问题再去搜索解决方案是最好的学习方式。<br> 希望这个解释能帮助你理解正则表达式！它是一个一旦掌握就会觉得无比方便的强大工具。</li></ol><h3 id="return和break的区别" tabindex="-1"><a class="header-anchor" href="#return和break的区别"><span>return和break的区别</span></a></h3><p>在编程中，break和 return都是控制流语句，但它们的用途和行为有显著区别：</p><ol><li>break语句<br><strong>​用途​：</strong> 用于循环（for, while, do...while）或 switch语句中</li></ol><p><strong>​作用​：</strong></p><ul><li>在循环中：立即终止当前循环，跳出循环体，继续执行循环之后的代码</li><li>在 switch语句中：跳出整个 switch语句，防止执行下一个 case</li><li>​作用范围​：仅影响最近的循环或 switch语句</li></ul><p>​示例​：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当 i 等于 5 时跳出循环</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：0, 1, 2, 3, 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>return语句</li></ol><ul><li>​用途​：用于函数中<br><strong>​作用​：</strong></li><li>终止函数的执行</li><li>可选地返回一个值给函数的调用者</li><li>如果函数没有返回值，则返回 undefined</li><li>​作用范围​：影响整个函数的执行</li></ul><p>​示例​：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> findNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">===</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 找到目标，立即返回索引并终止函数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 未找到目标，返回 -1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键区别</strong></p><table><thead><tr><th>特性</th><th>break</th><th>return</th></tr></thead><tbody><tr><td>​使用场景</td><td>循环和switch语句</td><td>函数内部</td></tr><tr><td>​主要作用​</td><td>跳出当前循环或switch语句</td><td>终止函数执行并返回一个值</td></tr><tr><td>​返回值​</td><td>无返回值</td><td>可以返回一个值（可选）</td></tr><tr><td>​影响范围​</td><td>仅影响最近的循环或switch</td><td>影响整个函数</td></tr><tr><td>​是否可跨函数​</td><td>不能跨函数使用</td><td>只能在函数内部使用</td></tr></tbody></table><p><strong>常见误区</strong><br> 1.​在函数内的循环中使用 break​：</p><ul><li>break只会跳出循环，不会终止函数</li><li>循环后的代码仍会执行</li></ul><p>2.​在循环中使用 return​：</p><ul><li>return会终止整个函数，包括循环和函数内后续的所有代码</li></ul><p>示例对比</p><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="javascript" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 break - 只跳出循环</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exampleBreak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;循环后的语句&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exampleBreak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 循环后的语句</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 return - 终止整个函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exampleReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;循环后的语句&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不会执行</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exampleReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出：</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>使用 break当您需要：</strong></p><ul><li><p>提前退出循环</p></li><li><p>防止 switch语句中的穿透（fall-through）</p></li></ul><p><strong>使用 return当您需要：</strong></p><ul><li><p>从函数中提前返回结果</p></li><li><p>在满足条件时立即终止函数</p></li></ul>',49))])}]]),h=JSON.parse('{"path":"/algorithm/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"title":"正则表达式","icon":"pen-to-square","category":["知识点"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T03:52:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"reveal\\",\\"url\\":\\"https://shenlirong.github.io/test/\\"}]}"],["meta",{"property":"og:url","content":"https://shenlirong.github.io/test/blog/algorithm/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"reveal"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T03:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T03:52:25.000Z"}]]},"git":{"createdTime":1756239492000,"updatedTime":1756266745000,"contributors":[{"name":"shenlirong","username":"shenlirong","email":"shenlirong@inspur.com","commits":3,"url":"https://github.com/shenlirong"}]},"readingTime":{"minutes":6.61,"words":1984},"filePathRelative":"algorithm/正则表达式.md","excerpt":""}')}}]);