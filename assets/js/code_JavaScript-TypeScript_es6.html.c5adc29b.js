"use strict";(self.webpackChunktest3=self.webpackChunktest3||[]).push([[5106],{1677:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Q3)(" more "),n[0]||(n[0]=(0,e.Fv)('<h1 id="es6数组解构赋值" tabindex="-1"><a class="header-anchor" href="#es6数组解构赋值"><span>es6数组解构赋值</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>以前为变量赋值，只能直接指定值，如：</span></span>\n<span class="line"><span>let a=1；</span></span>\n<span class="line"><span>let b=2;</span></span>\n<span class="line"><span>let c=3;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>es6 允许，这样写：</span></span>\n<span class="line"><span>let [a,b,c]=[1,2,3];</span></span>\n<span class="line"><span>let [head,...trail]=[1,2,3,4,5] // head:1;   trail:[2,3,4,5]</span></span>\n<span class="line"><span>let [x,y,z]=[&#39;a&#39;] //x:a; y:undefined; z:[]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1.对象的解构赋值</span></span>\n<span class="line"><span>let obj={usename:&#39;kebo&#39;,age:67};</span></span>\n<span class="line"><span>let {usename}=obj  //让变量usename 拿到obj 的值，obj 是需要解构的对象，赋值给对应的变量</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2.数组的解构赋值</span></span>\n<span class="line"><span>let arr=[1,2,3,5,4,9,5]</span></span>\n<span class="line"><span>let [a,b,c,d,r]=arr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es6-扩展运算符" tabindex="-1"><a class="header-anchor" href="#es6-扩展运算符"><span>es6 扩展运算符</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>扩展运算符是三个点（...）,该运算符主要用于函数调用</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1.数组的解构赋值</span></span>\n<span class="line"><span>console.log(...[1,2,3])    // 1,2,3</span></span>\n<span class="line"><span>console.log(1,...[1,2,3])  //1,1,2,3</span></span>\n<span class="line"><span>function add (x,y){</span></span>\n<span class="line"><span>    return x+y</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>const number=[4,38]</span></span>\n<span class="line"><span>add(...number)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>扩展运算符与正常的函数参数可以结合使用</span></span>\n<span class="line"><span>function(x,y,z,w){}</span></span>\n<span class="line"><span>    const avgs=[1,2,3]</span></span>\n<span class="line"><span>    if(-1,...avgs,2,...[3]);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2.对象的解构赋值</span></span>\n<span class="line"><span>let {bar,foo}={bar:&#39;78&#39;,foo:&#39;0000&#39;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="中严格模式" tabindex="-1"><a class="header-anchor" href="#中严格模式"><span>中严格模式</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1.理解</span></span>\n<span class="line"><span>我们平常所写的代码规范，叫正常模式；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2.目的，作用</span></span>\n<span class="line"><span>消除语法的一些不合理，不规范之处；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>3.使用</span></span>\n<span class="line"><span>在全局或者函数的第一条语句，使用：&quot;use strict&quot;;</span></span>\n<span class="line"><span>如果浏览器不支持，只是简单的解析为一条语句，没有任何副作用</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>4.语法和行为改变</span></span>\n<span class="line"><span>  必须用var 申明变量；</span></span>\n<span class="line"><span>  禁止自定义的this指向windows,一般指向自定义的实例；</span></span>\n<span class="line"><span>  对象不能有重名的属性；</span></span>\n<span class="line"><span>  创建eval作用域</span></span>\n<span class="line"><span>&lt;script type=&#39;text/javascript&#39;&gt;</span></span>\n<span class="line"><span>      &#39;use strict&#39;</span></span>\n<span class="line"><span>&lt;/script&gt;</span></span>\n<span class="line"><span>JSON.stringify(obj/arr)   //js 对象（数组）转换成json对象数组</span></span>\n<span class="line"><span>JSON.parse(json)         //json 对象（数组）转换成js 对象数组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es5数组的扩展" tabindex="-1"><a class="header-anchor" href="#es5数组的扩展"><span>es5数组的扩展</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>var arr=[1,2,3,56,8,9];</span></span>\n<span class="line"><span>arr.indexof(value) //得到值在数组中的下标</span></span>\n<span class="line"><span>arr.lastindexof(value) //得到值在数组中的最后一个下标</span></span>\n<span class="line"><span>arr.forEach(function (item,index){</span></span>\n<span class="line"><span>    // 遍历数组</span></span>\n<span class="line"><span>    console.log(item,index)  // item是每项值，index是下标 </span></span>\n<span class="line"><span>})</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>var arr1=arr.map(function (item,index){</span></span>\n<span class="line"><span>    // 遍历数组,返回一个新的数组，返回加工后的值</span></span>\n<span class="line"><span>    return item +10</span></span>\n<span class="line"><span>})</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>arr.filter(function (item,index){</span></span>\n<span class="line"><span>    // 遍历过滤出一个新的子数组，返回条件为true 的值</span></span>\n<span class="line"><span>    return item &gt;3   返回新的数组为 arr2=[56,8,9]</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es5函数的扩展" tabindex="-1"><a class="header-anchor" href="#es5函数的扩展"><span>es5函数的扩展</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>var obj={username:&#39;张三&#39;}</span></span>\n<span class="line"><span>function foo(data){</span></span>\n<span class="line"><span>    console.log(this) // this指向 windows</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    改变this 指向   foo.call(obj) foo.apply(obj) // this指向 obj</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1.call 、apply 两者不同在于 传参的方式不同 </span></span>\n<span class="line"><span>    call 直接从第二个参数开始，一次传入</span></span>\n<span class="line"><span>    apply 第二个数组必须是数组，传入的值放在数组里</span></span>\n<span class="line"><span>    foo.call(obj,33) foo.apply(obj,[333])</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2.bind</span></span>\n<span class="line"><span>foo.bind(obj)() //bind 绑定完this，不会立即调用当前的函数，而是将当前的函数调用，传参方式同call一样</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es6-变量" tabindex="-1"><a class="header-anchor" href="#es6-变量"><span>es6 变量</span></a></h1><p>1.变量提升<br> 代码在执行前，会经过预处理的过程，就是变量提升，在预处理的时候，会找到 var function 定义的相关变量 函数</p><h1 id="es6-模板字符串" tabindex="-1"><a class="header-anchor" href="#es6-模板字符串"><span>es6 模板字符串</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>var obj={usename:&#39;huh&#39;,age:56};</span></span>\n<span class="line"><span>var att=&quot;我的名字：&quot; +obj.usename+&#39;,我的年龄是：&#39;+obj.age</span></span>\n<span class="line"><span>使用模板字符串</span></span>\n<span class="line"><span>var att=`我的名字是：${obj.usename},我的年龄是：${obj.age}`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es6箭头函数" tabindex="-1"><a class="header-anchor" href="#es6箭头函数"><span>es6箭头函数</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>let fun=()=&gt;console.log(222) // 调用fun()，当没有参数时，不能省略括号</span></span>\n<span class="line"><span>let fun=a=&gt;console.log(555) //调用 fun(33),当有一个参数时，可以省略括号</span></span>\n<span class="line"><span>let fun=(x,y)=&gt;console.log(x,y) //调用 fun(2,7),当有两个参数时，不能省略括号</span></span>\n<span class="line"><span>当只有一条语句的时候，{}可以省略，省略后会自动返回语句执行的结果或者表达式的结果</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>箭头函数的特点</span></span>\n<span class="line"><span>1.箭头函数没有自己的this,箭头函数的this不是调用的时候决定的，而是定义的时候处在的对象就是它的this</span></span>\n<span class="line"><span>2.箭头函数的this看外层是否与函数</span></span>\n<span class="line"><span>  如果有  箭头函数的this就是外层函数的this</span></span>\n<span class="line"><span>  如果没有  箭头函数的this就是windows</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  fun:function(){</span></span>\n<span class="line"><span>      console.log(this) // this 指向调用它的对象</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>fun()=&gt;{</span></span>\n<span class="line"><span>     console.log(this) // this 指向windows</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es6-形参" tabindex="-1"><a class="header-anchor" href="#es6-形参"><span>es6 形参</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>point :function(x=0,y=0){   // 定义默认参数</span></span>\n<span class="line"><span>    this.x=x;</span></span>\n<span class="line"><span>    this.y=y</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>var point1=new point(80,7); //当传入参数时，使用实参</span></span>\n<span class="line"><span>var point2=new point()   //当没有传入参数的时候，使用默认参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es6-promise" tabindex="-1"><a class="header-anchor" href="#es6-promise"><span>es6 Promise</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>var promise=new Promise((resolve,reject)=&gt;{</span></span>\n<span class="line"><span>    console.log(11);</span></span>\n<span class="line"><span>    setTimeout(()=&gt;{</span></span>\n<span class="line"><span>        console.log(333)</span></span>\n<span class="line"><span>    },2000)</span></span>\n<span class="line"><span>    resolve()     //成功调用</span></span>\n<span class="line"><span>    reject()      //失败调用</span></span>\n<span class="line"><span>}).then((data)=&gt;{  // 成功的回调</span></span>\n<span class="line"><span>    console.log(data)</span></span>\n<span class="line"><span>},(error)=&gt;{      //失败的回调</span></span>\n<span class="line"><span>    console.log(error)</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',20))])}]]),p=JSON.parse('{"path":"/code/JavaScript-TypeScript/es6.html","title":"es6数组解构赋值","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","sticky":94,"star":true,"category":["前端开发"],"tag":["es6笔记","前端开发"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"es6数组解构赋值\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-09T10:29:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"reveal\\",\\"url\\":\\"https://shenlirong.github.io/test/\\"}]}"],["meta",{"property":"og:url","content":"https://shenlirong.github.io/test/blog/code/JavaScript-TypeScript/es6.html"}],["meta",{"property":"og:site_name","content":"reveal"}],["meta",{"property":"og:title","content":"es6数组解构赋值"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-09T10:29:01.000Z"}],["meta",{"property":"article:tag","content":"前端开发"}],["meta",{"property":"article:tag","content":"es6笔记"}],["meta",{"property":"article:modified_time","content":"2025-08-09T10:29:01.000Z"}]]},"git":{"createdTime":1749651720000,"updatedTime":1754735341000,"contributors":[{"name":"shenlirong","username":"shenlirong","email":"shenlirong@inspur.com","commits":5,"url":"https://github.com/shenlirong"}]},"readingTime":{"minutes":3.84,"words":1151},"filePathRelative":"code/JavaScript-TypeScript/es6.md","excerpt":""}')}}]);