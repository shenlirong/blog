"use strict";(self.webpackChunktest3=self.webpackChunktest3||[]).push([[6278],{595:(i,s,t)=>{t.r(s),t.d(s,{comp:()=>e,data:()=>n});var a=t(641);const l={},e=(0,t(6262).A)(l,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="微前端是什么" tabindex="-1"><a class="header-anchor" href="#微前端是什么"><span>微前端是什么</span></a></h1><p>微前端（Micro Frontends）是一种前端架构设计模式，核心思想是将大型单体前端应用拆分为多个独立、可协作的小型应用（称为“微应用”），每个微应用可独立开发、测试、部署，最终组合成完整产品。以下是通俗易懂的解释：</p><h3 id="一、-用生活比喻理解" tabindex="-1"><a class="header-anchor" href="#一、-用生活比喻理解"><span>一、 用生活比喻理解</span></a></h3><p>想象建造一栋摩天大楼：</p><ul><li>传统单体前端：所有施工队挤在一起，用同一套图纸施工。修改一个卫生间需要全楼停工。</li><li>微前端：大楼分为独立单元（住宅层、商场层、停车场层），每层由不同团队用不同材料（框架）建造，最后拼装成整体。修改停车场时，其他楼层照常运行。</li></ul><hr><h3 id="二、-微前端的核心构成" tabindex="-1"><a class="header-anchor" href="#二、-微前端的核心构成"><span>二、 微前端的核心构成</span></a></h3><table><thead><tr><th>组成部分</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>基座/容器</td><td>整合微应用，管理路由和通信</td><td>主框架页面（如导航菜单）</td></tr><tr><td>微应用</td><td>独立的功能模块</td><td>用户中心、商品搜索页</td></tr><tr><td>通信机制</td><td>微应用间的数据传递</td><td>事件总线、URL参数</td></tr></tbody></table><hr><h3 id="三、-关键技术实现方式" tabindex="-1"><a class="header-anchor" href="#三、-关键技术实现方式"><span>三、 关键技术实现方式</span></a></h3><ol><li>路由分发（主流） <ul><li>访问 /home 加载首页微应用，/cart 加载购物车微应用</li><li>工具：single-spa, qiankun</li></ul></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 示例：qiankun注册微应用</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerMicroApps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;home-app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;//localhost:8081&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">container</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;#container&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">activeRule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/home&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;cart-app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;//localhost:8082&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">container</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;#container&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">activeRule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/cart&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>组件化嵌入 <ul><li>在 React/Vue 中动态加载其他团队的组件</li></ul></li></ol><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Web Components 示例</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">user-profile</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;微应用A开发的组件&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">user-profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>模块联邦（Webpack 5） <ul><li>跨应用直接共享代码（如复用React组件库）</li></ul></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 模块联邦配置：暴露当前应用的组件</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ModuleFederationPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;app1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  exposes</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./Button&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/components/Button.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="四、-典型应用场景" tabindex="-1"><a class="header-anchor" href="#四、-典型应用场景"><span>四、 典型应用场景</span></a></h3><ol><li>企业级管理系统 <ul><li>财务模块（用Vue） + 人事模块（用React） + 报表模块（用Angular）</li></ul></li><li>电商平台 <ul><li>商品列表（独立团队维护） + 购物车（高频迭代） + 支付（强隔离需求）</li></ul></li><li>老系统改造 <ul><li>逐步将jQuery旧页面替换为现代框架模块</li></ul></li></ol><hr><h3 id="五、-与传统开发的对比" tabindex="-1"><a class="header-anchor" href="#五、-与传统开发的对比"><span>五、 与传统开发的对比</span></a></h3><table><thead><tr><th>痛点</th><th>传统单体前端</th><th>微前端解决方案</th></tr></thead><tbody><tr><td>技术栈锁死</td><td>全系统强制统一框架</td><td>各模块可自由选型</td></tr><tr><td>发布阻塞</td><td>一个小改动全员上线</td><td>独立部署，互不影响</td></tr><tr><td>团队协作</td><td>跨团队代码冲突频繁</td><td>团队自治，责任边界清晰</td></tr><tr><td>维护成本</td><td>代码量百万行，难以修改</td><td>模块代码&lt;1万行，易维护</td></tr></tbody></table><hr><h3 id="六、-必须注意的挑战" tabindex="-1"><a class="header-anchor" href="#六、-必须注意的挑战"><span>六、 必须注意的挑战</span></a></h3><ol><li>性能代价 <ul><li>首次加载可能变慢（需动态加载多个JS包）<br> 优化方案：预加载非首屏模块、共享公共依赖</li></ul></li><li>一致性风险 <ul><li>不同团队开发的UI风格或交互不一致<br> 解法：强制使用统一设计系统组件库</li></ul></li><li>通信复杂度 <ul><li>微应用间数据传递可能混乱<br> 标准协议：约定用CustomEvent或状态管理库</li></ul></li></ol><hr><h3 id="七、-一句话总结" tabindex="-1"><a class="header-anchor" href="#七、-一句话总结"><span>七、 一句话总结</span></a></h3><p>微前端本质是：用分布式架构思维解决前端“人多、量大、迭代快”的协作问题，代价是需精心设计集成方案。</p><blockquote><p>📌 适合中大型项目（&gt;5团队协作），小型项目慎用！</p></blockquote><h3 id="八、-作用" tabindex="-1"><a class="header-anchor" href="#八、-作用"><span>八、 作用</span></a></h3><p>微前端核心作用：<br> 用一句话总结：将大型前端应用拆解为独立模块，实现「分治」开发与管理。具体作用如下：</p><h3 id="一、-核心价值-解决大型项目痛点" tabindex="-1"><a class="header-anchor" href="#一、-核心价值-解决大型项目痛点"><span>一、 核心价值：解决大型项目痛点</span></a></h3><ol><li>解耦团队协作 <ul><li>每个功能模块（如商品页、支付流程）由独立团队开发，技术栈可选不同框架（React/Vue/Angular）</li><li>团队独立开发、测试、部署，互不阻塞（如支付团队升级无需等商品团队）</li></ul></li><li>渐进式升级 <ul><li>逐步替换老旧代码：用新技术重构部分模块（如把 jQuery 订单模块改造成 Vue），无需全盘重写</li><li>规避「一次性重构」风险</li></ul></li></ol><hr><h3 id="二、-技术实现优势" tabindex="-1"><a class="header-anchor" href="#二、-技术实现优势"><span>二、 技术实现优势</span></a></h3><ol><li>按需加载提速 <ul><li>用户访问时动态加载所需模块（如打开购物车才加载相关代码）</li><li>⚡ 首屏速度提升30%+（案例：某电商平台应用微前端后LCP优化42%）</li></ul></li><li>故障隔离增强稳定性 <ul><li>单个模块崩溃不影响整体（如用户中心出错时商品页仍可浏览）</li><li>回滚只需重部署问题模块</li></ul></li></ol><hr><h3 id="三、-隐藏价值-组织效能提升" tabindex="-1"><a class="header-anchor" href="#三、-隐藏价值-组织效能提升"><span>三、 隐藏价值：组织效能提升</span></a></h3><ol><li>优化开发流程</li></ol><table><thead><tr><th>传统单体</th><th>微前端架构</th></tr></thead><tbody><tr><td>全团队同步发布</td><td>模块独立发布</td></tr><tr><td>构建时间&gt;10分钟</td><td>单模块构建&lt;2分钟</td></tr><tr><td>跨团队协调成本高</td><td>团队自治，沟通减50%</td></tr></tbody></table><hr><h3 id="⚠️-注意-不是银弹" tabindex="-1"><a class="header-anchor" href="#⚠️-注意-不是银弹"><span>⚠️ 注意：不是银弹！</span></a></h3><h2 id="适用场景-✅-100-页面的企业级应用✅-5-团队协作项目✅-需兼容多技术栈-如收购系统整合-规避场景-❌-小型项目-反而增加复杂度-❌-缺乏标准化基建-需统一监控-部署-设计系统" tabindex="-1"><a class="header-anchor" href="#适用场景-✅-100-页面的企业级应用✅-5-团队协作项目✅-需兼容多技术栈-如收购系统整合-规避场景-❌-小型项目-反而增加复杂度-❌-缺乏标准化基建-需统一监控-部署-设计系统"><span>适用场景：<br> ✅ 100+页面的企业级应用<br> ✅ 5+团队协作项目<br> ✅ 需兼容多技术栈（如收购系统整合）<br> 规避场景：<br> ❌ 小型项目（反而增加复杂度）<br> ❌ 缺乏标准化基建（需统一监控/部署/设计系统）</span></a></h2><h3 id="技术方案对比-主流实现" tabindex="-1"><a class="header-anchor" href="#技术方案对比-主流实现"><span>技术方案对比（主流实现）</span></a></h3><table><thead><tr><th>方式</th><th>代表工具</th><th>适用场景</th></tr></thead><tbody><tr><td>路由分发</td><td>single-spa/qiankun</td><td>门户网站（不同URL不同模块）</td></tr><tr><td>组件嵌套</td><td>Web Components</td><td>后台系统（模块嵌入面板）</td></tr><tr><td>模块联邦</td><td>Webpack 5 Module Federation</td><td>需深度集成的SPA</td></tr><tr><td>iframe</td><td>原生</td><td>简单隔离（牺牲体验）</td></tr></tbody></table><hr><p>总结：微前端本质是用架构复杂度换取组织敏捷性，核心作用即通过技术拆分实现：<br> 团队自治✖️技术自由✖️渐进演进✖️风险隔离。是否采用取决于项目规模与团队协作痛点。</p>',47)]))}]]),n=JSON.parse('{"path":"/code/microfront/%E5%BE%AE%E5%89%8D%E7%AB%AF.html","title":"microfront","lang":"zh-CN","frontmatter":{"title":"microfront","icon":"pen-to-square","category":["microfront"],"description":"微前端是什么 微前端（Micro Frontends）是一种前端架构设计模式，核心思想是将大型单体前端应用拆分为多个独立、可协作的小型应用（称为“微应用”），每个微应用可独立开发、测试、部署，最终组合成完整产品。以下是通俗易懂的解释： 一、 用生活比喻理解 想象建造一栋摩天大楼： 传统单体前端：所有施工队挤在一起，用同一套图纸施工。修改一个卫生间需要全...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"microfront\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-08T17:13:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"reveal\\",\\"url\\":\\"https://shenlirong.github.io/test/\\"}]}"],["meta",{"property":"og:url","content":"https://shenlirong.github.io/test/blog/code/microfront/%E5%BE%AE%E5%89%8D%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"reveal"}],["meta",{"property":"og:title","content":"microfront"}],["meta",{"property":"og:description","content":"微前端是什么 微前端（Micro Frontends）是一种前端架构设计模式，核心思想是将大型单体前端应用拆分为多个独立、可协作的小型应用（称为“微应用”），每个微应用可独立开发、测试、部署，最终组合成完整产品。以下是通俗易懂的解释： 一、 用生活比喻理解 想象建造一栋摩天大楼： 传统单体前端：所有施工队挤在一起，用同一套图纸施工。修改一个卫生间需要全..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-08T17:13:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-08T17:13:12.000Z"}]]},"git":{"createdTime":1754673192000,"updatedTime":1754673192000,"contributors":[{"name":"shenlirong","username":"shenlirong","email":"shenlirong@inspur.com","commits":1,"url":"https://github.com/shenlirong"}]},"readingTime":{"minutes":4.7,"words":1411},"filePathRelative":"code/microfront/微前端.md","excerpt":"\\n<p>微前端（Micro Frontends）是一种前端架构设计模式，核心思想是将大型单体前端应用拆分为多个独立、可协作的小型应用（称为“微应用”），每个微应用可独立开发、测试、部署，最终组合成完整产品。以下是通俗易懂的解释：</p>\\n<h3>一、 用生活比喻理解</h3>\\n<p>想象建造一栋摩天大楼：</p>\\n<ul>\\n<li>传统单体前端：所有施工队挤在一起，用同一套图纸施工。修改一个卫生间需要全楼停工。</li>\\n<li>微前端：大楼分为独立单元（住宅层、商场层、停车场层），每层由不同团队用不同材料（框架）建造，最后拼装成整体。修改停车场时，其他楼层照常运行。</li>\\n</ul>\\n<hr>","autoDesc":true}')}}]);