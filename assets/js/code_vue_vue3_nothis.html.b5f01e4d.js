"use strict";(self.webpackChunktest3=self.webpackChunktest3||[]).push([[4556],{2874:(e,n,s)=>{s.r(n),s.d(n,{comp:()=>a,data:()=>r});var t=s(641);const i={},a=(0,s(6262).A)(i,[["render",function(e,n){return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Q3)(" more "),n[0]||(n[0]=(0,t.Fv)('<h1 id="为什么vue3没有this" tabindex="-1"><a class="header-anchor" href="#为什么vue3没有this"><span>为什么Vue3没有this</span></a></h1><p>‌ <strong>Vue 3 没有this的主要原因是因为它引入了 组合式API（Composition API），这种新的API设 计使得代码更加模块化和清晰，减少了对this的依赖‌‌.</strong></p><h2 id="_1-组合式api的作用和优势" tabindex="-1"><a class="header-anchor" href="#_1-组合式api的作用和优势"><span>1.组合式API的作用和优势</span></a></h2><p>组合式API通过 setup函数 来定义组件的状态和行为，所有的响应式状态和方法都定义在setup函数内，并通过返回对象的形式暴露出去。这种方式不再需要使用this，因为状态和方法都是通过显式的变量和函数来引用，从而避免了this指向不明确的问题‌.<br><strong>组合式API的优点包括</strong>：<br><strong>1.‌模块化‌</strong>：将组件逻辑拆分成更小的、可重用的函数，使得代码更易于维护和测试。<br><strong>2.‌逻辑清晰‌</strong>：避免了this带来的困惑，尤其是在复杂的组件中。<br><strong>3.‌类型支持‌</strong>：与 TypeScript 结合更加自然，能够更好地利用TypeScript的类型检查和智能提示‌</p><p><strong>组合式API的具体应用示例</strong><br> 在Vue 3中，组合式API的使用方式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>import { ref } from &#39;vue&#39;;</span></span>\n<span class="line"><span>export default {</span></span>\n<span class="line"><span>  setup() {</span></span>\n<span class="line"><span>    const count = ref(0);</span></span>\n<span class="line"><span>    const increment = () =&gt; {</span></span>\n<span class="line"><span>      count.value++;</span></span>\n<span class="line"><span>    };</span></span>\n<span class="line"><span>    return { count, increment };</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这个例子中，count和increment函数都不需要使用this，因为它们是通过显式的变量和函数来引用的</strong></p>',7))])}]]),r=JSON.parse('{"path":"/code/vue/vue3_nothis.html","title":"为什么Vue3没有this","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","sticky":83,"category":["前端开发"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么Vue3没有this\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-09T15:15:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"reveal\\",\\"url\\":\\"https://shenlirong.github.io/test/\\"}]}"],["meta",{"property":"og:url","content":"https://shenlirong.github.io/test/blog/code/vue/vue3_nothis.html"}],["meta",{"property":"og:site_name","content":"reveal"}],["meta",{"property":"og:title","content":"为什么Vue3没有this"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-09T15:15:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-09T15:15:43.000Z"}]]},"git":{"createdTime":1750518801000,"updatedTime":1754752543000,"contributors":[{"name":"shenlirong","username":"shenlirong","email":"shenlirong@inspur.com","commits":3,"url":"https://github.com/shenlirong"}]},"readingTime":{"minutes":1.21,"words":363},"filePathRelative":"code/vue/vue3_nothis.md","excerpt":""}')}}]);